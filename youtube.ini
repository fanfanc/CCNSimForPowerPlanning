#===============================================
#YouTube-like catalog configuration for ccnSim
#-----------------------------------------------

# Topologies of CCN network.
[General]
network = topologies.hierarchy_tree_network

#===============================================
# output
#-----------------------------------------------
# By default, output in results/
output-vector-file =  ${resultdir}/out${repetition}.vec
output-scalar-file =  ${resultdir}/out${repetition}.sca

# number of runs
repeat = 1
seed-set = ${repetition}

#===============================================
# simulation duration
#-----------------------------------------------
# There are three simulation states: 
#	1) filling caches 
#	2) transient 
#	3) steady-state
#
# 1) you can start with empty caches (warmup=false,default) or 
# with caches already filled with randomized content (warmup=true).
# Starting with filled caches is useful only when Zipf exponent 
# s very large (say >1.5) so that caches may not even fill up 
# due to very skewed requests.
#    
**.warmup = false

# 2) parameters tuning intervals of confidence estimation for hit 
# rate of individual caches, affecting convergence speed; 
#
# We implement two convergence methods (avg|wc):
# -Average (avg): we require the convergence of the network hit rate 
# -Worst Case(wc): we require the convergence of all individual nodes
#
**.convergence_type = "wc"

# Zipf percentile limit for stabilization node; i.e., we require the 
# convergence statistics only for the bulk of the catalog (90% by default)
**.convergence_zipf_percentile = 0.9

# threshold of variance hit rate (wc=per node, avg=over all nodes)
**.convergence_threshold_wc = 0.001
**.convergence_threshold_avg = 0.1 


# 3) simulated time to spend in steady state after transient ended  
**.sim_time = 0


#===============================================
#  Catalog
#-----------------------------------------------

# Global request rate, in Hz (over all network nodes).
**.lambda = 50

# Client requests can be geographically skweked (see [2] in HOWTO).
# When D==-1 uniform requests are considered (default).
**.D = -1 

# Content popularity: Mandelbrot-Zipf distribution parameters
# Mandelbrot-Zipf exponent 
**.alpha = 1.2
# Mandelbrot-Zipf plateau 
**.q = 0  

# Catalog size, in files
**.F = 10^6

# Average file size in chunks, geometrically distributed
**.avgC =  1000 

# Number of replicas of original (ie, non-cached) content.
**.repository_num = 1

# Repository placement policy
# There are two policies (ugc,pop)
# -ugc = user generated content, 
#	Multiple replicas may exist, but there is no single repository
#	storing the whole catalog. Rather, individual files are randomly 
#	assigned to a repository, that can be located behind any 
#	CCN router (i.e., in practice we have as many repositories 
#	as CCN nodes).
# -pop = point of presence, 
#	The number of repositories equal the number of replicas, and 
#	the original replicas of the whole catalog are stored in each 
# 	repository.
#	
#	
**.repository_policy = "pop"


#===============================================
#  CCN node
#-----------------------------------------------

# Cache size (in chunks)
**.S = 10^5

# Caching Replacement Policy {lru|rnd|fifo|two|lfu}, see [1] in HOWTO
**.cache_replacement_policy = "lfu"

# Decision Policy {(always)|never|distance|lcd|fixP}, see [1] in HOWTO
**.decision_policy = "always"

# Strategy layer policy  {closest|all}, see [1] in HOWTO; 
# other interest forwarding policies will be available in 
# future releases of ccnSim
**.strategy_layer = "closest" 

# Multipath cardinality, 
# M=1 => shortest path routing
# M=2 => two disjoint paths, valid only for strategy_layer=closest, see [1] in HOWTO
**.M = 1  

# Multipath performance,
# Flag determining if paths are precomputed and stored in an external file 
# (under the directory "optimal")  or if they have to be calculated on demand. 
# Path stored in file  are faster, but they need to be computed once for any 
# new topology.
**.fromFile = false


# Discouraged parameter, will be removed from future versions of ccnSim.
# (do not modify but do not delete either).
**.c = 0   
